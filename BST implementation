#include <iostream>
#include <fstream>
#include <string>
using namespace std;

struct nodeType
{
  int info;
  nodeType* left ;
  nodeType* right ;
};

class tree
{
  public:
    nodeType* rootptr = NULL ;
    void insert(int data)
    {
      if(!rootptr)
      {
        rootptr = makenode(data);
      }
      else //rootptr not NULL
      {
        put(rootptr, data) ; //rootptr is passed as argument, but a pointer copy is made
      }
      
    }
    void put(nodeType* rootptr, int data)
    {
      if ( (data > rootptr -> info) && (rootptr -> right == NULL) )
      {
        rootptr -> right = makenode(data);
      }
      else if ( (data <= rootptr -> info) && (rootptr -> left == NULL) )
      {
        rootptr -> left = makenode(data) ;
      }
      else
        
        if (data <= rootptr-> info)
          return put(rootptr-> left, data) ;
        else //bigger and some node already there
          return put(rootptr -> right, data);
      
    }
    
    void print()
    {
      cout << rootptr -> info << endl ; 
      cout << rootptr -> left-> info << endl;
      cout << rootptr -> right -> info << endl;
      cout << rootptr -> right -> right -> info << endl ;
    }
    
    nodeType* makenode(int data)
    {
      nodeType* temp = new nodeType;
      temp -> info = data ;
      temp -> left = NULL ;
      temp -> right = NULL ;
      return temp ;
    }
    
};

int main()
{
    tree oak ;
    oak.insert(4);
    oak.insert(5) ; 
    oak.insert(2) ;
    
    oak.insert(8) ;
    oak.print() ;
    return 0;
}


/*4 
2 
5 
8 
*/

