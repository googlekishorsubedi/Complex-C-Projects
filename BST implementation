#include <iostream>
#include <fstream>
#include <string>
using namespace std;

struct person
{
	string name;
	int salary;
};

struct nodeType
{
	person info;
	nodeType* left;
	nodeType* right;
};

class tree
{
public:
	nodeType* rootptr = NULL;

	void inorder(nodeType* ptr)
	{
		if (ptr -> left != NULL)
			inorder(ptr->left);
		cout << ptr->info.salary << endl;
		if (ptr -> right != NULL)
			inorder(ptr->right);
	}

	void insert(person man)
	{
		if (!rootptr)
		{
			rootptr = makenode(man);
		}
		else //rootptr not NULL
		{
			put(rootptr, man); //rootptr is passed as argument, but a pointer copy is made
		}
	}

	void put(nodeType* rootptr, person man)
	{
		if ((man.salary > rootptr->info.salary) && (rootptr->right == NULL))
		{
			rootptr->right = makenode(man);
		}
		else if ((man.salary <= rootptr->info.salary) && (rootptr->left == NULL))
		{
			rootptr->left = makenode(man);
		}
		else

			if (man.salary <= rootptr->info.salary)
				return put(rootptr->left, man);
			else //bigger and some node already there
				return put(rootptr->right, man);

	}

	nodeType* makenode(person man)
	{
		nodeType* temp = new nodeType;
		temp->info = man;
		temp->left = NULL;
		temp->right = NULL;
		return temp;
	}

};

int main()
{
	string fname, lname;
	tree oak;
	ifstream myfile;
	myfile.open("infile.txt");

	person a = person();
	myfile >> fname >> lname >> a.salary;
	while (myfile)
	{
		a.name = fname + lname;
		oak.insert(a);
		myfile >> fname >> lname >> a.salary;
	}

	oak.inorder(oak.rootptr);

	return 0;
}
