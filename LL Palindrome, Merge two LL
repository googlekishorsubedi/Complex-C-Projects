#include <iostream>
#include <fstream>
#include <string>
using namespace std;

struct node
{
  int info;
  node* next ;
};

class linkedlist
{
  public:
    node* firstptr = NULL ;
    ~linkedlist()
    {
      while(firstptr){
        node* hold = firstptr -> next ;
        delete firstptr ;
        firstptr = hold ;
      }
    }
    
    void insert(int x )
    {
      if (!firstptr)
      {
        firstptr = new node;
        firstptr -> info = x ;
        firstptr -> next = NULL ;
      }
      else
      {
        node* curr ;
        for(curr = firstptr; curr -> next != NULL ; curr = curr -> next);
        curr -> next = new node;
        curr -> next -> info = x ;
        curr -> next -> next = NULL ;
      }
    }
    
    void print()
    {
      node* curr = firstptr;
      while(curr)
      {
        cout << curr -> info << endl;
        curr = curr -> next ;
      }
      cout << endl << endl ;
    }
    bool palindrome_check()
    {
      vector <int> myvector ;
      node* curr = firstptr;
      while(curr != NULL)
      {
        myvector.push_back(curr-> info);
        curr = curr -> next ;
      }
      
      int i = 0 ;
      while( i < myvector.size()/2 )
      {
        if(myvector[i] != myvector[myvector.size() - i - 1])
          return false;
        i ++ ;
      }
      return true ;
    }
    
};

int main()
{
    linkedlist l1 ;
    l1.insert(1);
    l1.insert(2);
    l1.insert(3);
    l1.insert(4);
    l1.insert(5) ;
    l1.insert(6) ;
    l1.insert(9) ;
    
    l1.print() ;
    l1.palindrome_check() ;
    l1.print() ;
    return 0;
}
/* Palindrome check Linked List: O(N+ N/2) O(N)Spacefor vector
 
    
 bool palindrome_check()
    {
      vector <int> my_vector ;
      my_vector.push_back(firstptr-> info) ;
      
      node* prev = firstptr -> next;
      node* curr = prev -> next ;
      
      while( curr -> next != NULL)
      {
        my_vector.push_back(prev-> info) ;
        prev = prev -> next;
        curr = curr -> next -> next ;
      }
      // prev points to middle element in linked list, vector has first half of elements 
      int finalindex= my_vector.size() - 1 ;
      prev = prev -> next ;
      
      while(prev != NULL)
      {
        if (prev -> info != my_vector[finalindex--] )
          return false ;
        prev = prev -> next ;
      }
      return true ;
    }
    
/*
node* merge(node* list1, node* list2)
{

    node* p = NULL ;
    node* mergedfirstpointer = list1 ;
    
    while(list2 != NULL)
    {
      while (list1!= NULL && list1 -> info < list2 -> info )
      {
        p = list1 ;
        list1 = list1 -> next ;
      }
      if (p== NULL)
      {
        node* hold = list2 -> next ;
        list2 -> next = list1 ;
        mergedfirstpointer = list2 ;
       list2 = hold ;
        continue ;
      }
      p -> next = list2 ;
      node* hold = list2 ;
      list2 = list2 -> next ;
      hold -> next = list1 ;
      if (list1 != NULL)
      {
        p = list1 ;
        list1 = list1 -> next ;
      }
    }
  return mergedfirstpointer;
}
    
  */









