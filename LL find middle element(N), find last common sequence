#include <iostream>
#include <fstream>
#include <string>
using namespace std;

struct node
{
  int info;
  node* next ;
};

class linkedlist
{
  public:
    node* firstptr = NULL ;
    ~linkedlist()
    {
      while(firstptr){
        node* hold = firstptr -> next ;
        delete firstptr ;
        firstptr = hold ;
      }
    }
    
    void insert(int x )
    {
      if (!firstptr)
      {
        firstptr = new node;
        firstptr -> info = x ;
        firstptr -> next = NULL ;
      }
      else
      {
        node* curr ;
        for(curr = firstptr; curr -> next != NULL ; curr = curr -> next);
        curr -> next = new node;
        curr -> next -> info = x ;
        curr -> next -> next = NULL ;
      }
    }
    
    void print()
    {
      node* curr = firstptr;
      while(curr)
      {
        cout << curr -> info << endl;
        curr = curr -> next ;
      }
      cout << endl << endl ;
    }
    
    int find()
    {
      node* prev = firstptr -> next ;
      node* curr = prev -> next ;
      while ( curr -> next != NULL )
      {
        prev = prev -> next ;
        curr = curr -> next -> next ;
      }
      return prev -> info ;
    }
};

int main()
{
    linkedlist l1 ;
    l1.insert(1);
    l1.insert(23);
    l1.insert(2);
    l1.insert(3);
    l1.insert(4);
    l1.insert(31) ;
    l1.insert(5) ;
    l1.insert(6) ;
    l1.insert(9) ;
    
    l1.print() ; 
    cout << l1.find() ; //4 
    return 0;
}


int find (linkedlist a, linkedlist b)
    {
      int lengtha = 0 ;
      int lengthb = 0 ;
      
      int final = 0 ;
      linkedlist bigobject ;
      linkedlist smallobject;
      
      node* acurr = a.firstptr ;
      node* bcurr = b.firstptr ;
      while(acurr != NULL)
      {
        lengtha += 1 ;
        acurr = acurr -> next ;
      }
      bcurr = b. firstptr ;
      while(bcurr != NULL)
      {
        lengthb += 1 ;
        bcurr = bcurr -> next ;
      }
      
      bool onefound = false ;
      acurr = a.firstptr;
      bcurr = b.firstptr;
      
      if(lengtha < lengthb)
      {
        for(int i=0; i< (lengthb-lengtha); i++ )
        {
          bcurr = bcurr -> next ;
        }
      }
      
      else
      {
        for(int i=0; i< (lengtha-lengthb); i++ )
        {
          acurr = acurr -> next ;
        }
      }
      while(acurr != NULL)
      {
        if (acurr -> info == bcurr -> info && onefound == false)
        {
          final = acurr -> info ;
          onefound = true ;
        }
        
        else
        {
          if(acurr -> info != bcurr -> info)
          {
            onefound = false;
            final = 0 ;
          }
        }
        
        acurr = acurr -> next ;
        bcurr = bcurr -> next ;
      }
      return final ;
      
    }
   







