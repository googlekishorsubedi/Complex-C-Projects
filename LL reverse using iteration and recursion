#include <iostream>
using namespace std ;


struct nodetype
{
  int info ;
  nodetype* next ;
};

class linkedlist
{
  public:
    nodetype* head = NULL ;
    
    void insert(int data)
    {
      if(!head)
      {
        head = new nodetype ;
        head -> info = data ;
        head -> next = NULL ;
      }
      else
      {
        nodetype* curr ;
        for(curr = head; curr -> next != NULL; curr = curr -> next) ;
        curr -> next = new nodetype;
        curr -> next -> info = data;
        curr -> next -> next = NULL ;
      }
    }
  
    void print()
    {
      nodetype* curr = head ;
      while(curr)
      {
        cout << curr -> info << endl;
        curr = curr -> next ;
      }
      cout << endl << endl ;
    }
    
    void reverse()
    {
      nodetype* prev = NULL;
      nodetype* curr = head;
      
      while (curr != NULL)
      {
        nodetype* nextptr = curr -> next ;
        curr -> next = prev ;
        prev = curr ;
        curr = nextptr ;
        
      }
      head = prev ;
    }
};

int main()
{
  linkedlist l1 ;
  l1.insert(100);
  l1.insert(200);
  l1.insert(300) ;
  l1.insert(400) ;
  
  l1.print() ;
  
  l1. reverse() ;
  l1.print() ;
  return 0;
}
/* USING recursion to reverse the linked lists
void reverse(nodetype* prev, nodetype* curr)
    {
      if(curr -> next == NULL)
      {
        curr -> next = prev ;
        head = curr ;
        return ;
      }
      
      else
      {
        nodetype* m = curr -> next ;
        curr -> next = prev ;
        prev = curr ;
        curr = m ;
        return reverse(prev , curr) ;
      }
    }
  
  nodetype* p = NULL ;
  nodetype* c = l1.head ;
  l1.reverse(p, c) ;
  
  */ 




